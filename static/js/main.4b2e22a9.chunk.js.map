{"version":3,"sources":["components/WhiteKey.js","components/BlackKey.js","CONST/key.js","components/Piano.js","App.js","serviceWorker.js","index.js"],"names":["WhiteKey","config","play","hightLightKey","useState","className","setClassName","useEffect","key","defaultClass","setTimeout","onClick","toUpperCase","BlackKey","style","left","top","whiteKeys","whiteKeysMapping","q","w","e","r","t","y","u","i","o","p","z","x","c","v","b","n","m","l","blackKeys","blackKeysMapping","1","2","3","4","5","6","7","8","9","0","d","f","g","h","j","Piano","setHighLightKey","window","piano","whiteKeysComponent","map","index","blackKeysComponent","playNode","event","uuid","uuidv4","document","body","addEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b2e22a9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction WhiteKey({ config, play, hightLightKey }) {\r\n  const defaultClass = \"piano-keys key-white\";\r\n  const [className, setClassName] = useState(defaultClass);\r\n\r\n  useEffect(() => {\r\n    if (hightLightKey && hightLightKey.key === config[2]) {\r\n      setClassName(defaultClass + \" key-highlight\");\r\n    }\r\n    setTimeout(() => {\r\n      setClassName(defaultClass);\r\n    }, 400);\r\n  }, [hightLightKey]);\r\n  return (\r\n    <div\r\n      className={className}\r\n      onClick={() => {\r\n        play(config);\r\n      }}\r\n    >\r\n      <div className=\"key\">{config[2].toUpperCase()}</div>\r\n      <div className=\"node\">{config[0] + config[1]}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhiteKey;\r\n","import React from \"react\";\r\n\r\nfunction BlackKey({ config, play }) {\r\n  return (\r\n    <div\r\n      className=\"piano-keys key-black\"\r\n      style={{ left: config[2] + \"px\", top: \"5px\" }}\r\n      onClick={() => {\r\n        play(config);\r\n      }}\r\n    >\r\n      <div className=\"key\">{config[3].toUpperCase()}</div>\r\n      <div className=\"node\">\r\n        {config[0]}\r\n        {config[1]}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlackKey;\r\n","export const whiteKeys = [\r\n  ['C', 3, 'q'], // Phím C3\r\n  ['D', 3, 'w'],\r\n  ['E', 3, 'e'],\r\n  ['F', 3, 'r'],\r\n  ['G', 3, 't'],\r\n  ['A', 3, 'y'],\r\n  ['B', 3, 'u'],\r\n\r\n  ['C', 4, 'i'],\r\n  ['D', 4, 'o'],\r\n  ['E', 4, 'p'],\r\n  ['F', 4, 'z'],\r\n  ['G', 4, 'x'],\r\n  ['A', 4, 'c'],\r\n  ['B', 4, 'v'],\r\n\r\n  ['C', 5, 'b'],\r\n  ['D', 5, 'n'],\r\n  ['E', 5, 'm'],\r\n  ['F', 5, ','],\r\n  ['G', 5, '.'],\r\n  ['A', 5, '/'],\r\n  ['B', 5, 'l'],\r\n];\r\nexport const whiteKeysList = [\r\n  'q', 'w', 'e', 'r', 't', 'y', 'u',\r\n  'i', 'o', 'p', 'z', 'x', 'c', 'v',\r\n  'b', 'n', 'm', ',', '.', '/', 'l'\r\n]\r\nexport const whiteKeysMapping = {\r\n  q: whiteKeys[0],\r\n  w: whiteKeys[1],\r\n  e: whiteKeys[2],\r\n  r: whiteKeys[3],\r\n  t: whiteKeys[4],\r\n  y: whiteKeys[5],\r\n  u: whiteKeys[6],\r\n\r\n  i: whiteKeys[7],\r\n  o: whiteKeys[8],\r\n  p: whiteKeys[9],\r\n  z: whiteKeys[10],\r\n  x: whiteKeys[11],\r\n  c: whiteKeys[12],\r\n  v: whiteKeys[13],\r\n\r\n  b: whiteKeys[14],\r\n  n: whiteKeys[15],\r\n  m: whiteKeys[16],\r\n  ',': whiteKeys[17],\r\n  '.': whiteKeys[18],\r\n  '/': whiteKeys[19],\r\n  l: whiteKeys[20],\r\n}\r\n\r\nexport const blackKeys = [\r\n  ['C#', 3, 26, '1'], // Phím C#3, left: 26px\r\n  ['D#', 3, 68, '2'],\r\n\r\n  ['F#', 3, 152, '3'],\r\n  ['G#', 3, 194, '4'],\r\n  ['A#', 3, 236, '5'],\r\n\r\n  ['C#', 4, 320, '6'],\r\n  ['D#', 4, 362, '7'],\r\n\r\n  ['F#', 4, 446, '8'],\r\n  ['G#', 4, 488, '9'],\r\n  ['A#', 4, 530, '0'],\r\n\r\n  ['C#', 5, 614, 'd'],\r\n  ['D#', 5, 656, 'f'],\r\n\r\n  ['F#', 5, 740, 'g'],\r\n  ['G#', 5, 782, 'h'],\r\n  ['A#', 5, 824, 'j']\r\n]\r\n\r\nexport const blackKeysList = [\r\n  '1', '2',\r\n  '3', '4', '5',\r\n  '6', '7',\r\n  '8', '9', '0',\r\n  'd', 'f',\r\n  'g', 'h', 'j'\r\n]\r\n\r\nexport const blackKeysMapping = {\r\n  1: blackKeys[0],\r\n  2: blackKeys[1],\r\n\r\n  3: blackKeys[2],\r\n  4: blackKeys[3],\r\n  5: blackKeys[4],\r\n\r\n  6: blackKeys[5],\r\n  7: blackKeys[6],\r\n\r\n  8: blackKeys[7],\r\n  9: blackKeys[8],\r\n  0: blackKeys[9],\r\n\r\n  d: blackKeys[10],\r\n  f: blackKeys[11],\r\n\r\n  g: blackKeys[12],\r\n  h: blackKeys[13],\r\n  j: blackKeys[14]\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport WhiteKey from \"./WhiteKey\";\r\nimport BlackKey from \"./BlackKey\";\r\nimport {\r\n  whiteKeys,\r\n  whiteKeysMapping,\r\n  blackKeys,\r\n  blackKeysMapping,\r\n} from \"./../CONST/key\";\r\n\r\nfunction Piano() {\r\n  const [hightLightKey, setHighLightKey] = useState(null);\r\n  const play = (config) => window.piano.play(config[0], config[1], 2);\r\n  const whiteKeysComponent = whiteKeys.map((key, index) => (\r\n    <WhiteKey\r\n      config={key}\r\n      key={index}\r\n      play={play}\r\n      hightLightKey={hightLightKey}\r\n    />\r\n  ));\r\n  const blackKeysComponent = blackKeys.map((key, index) => (\r\n    <BlackKey\r\n      config={key}\r\n      key={index}\r\n      play={play}\r\n      hightLightKey={hightLightKey}\r\n    />\r\n  ));\r\n\r\n  const playNode = (event) => {\r\n    const key = event.key;\r\n    const config = whiteKeysMapping[key] || blackKeysMapping[key];\r\n    if (config) {\r\n      setHighLightKey({\r\n        key,\r\n        uuid: uuidv4(),\r\n      });\r\n      play(config);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const doc = window.document.body;\r\n    doc.addEventListener(\"keypress\", playNode);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <p>Piano component</p>\r\n      <div className=\"page\">\r\n        <div className=\"piano\">\r\n          {blackKeysComponent}\r\n          <div>{whiteKeysComponent}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Piano;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Piano from \"./components/Piano\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <h1>Play your piano</h1>\r\n      <Piano />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}